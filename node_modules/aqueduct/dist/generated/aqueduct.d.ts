import { ApiService } from '../api-service';
import { BigNumber } from 'bignumber.js';
import { TokenCache } from '../token-cache';
export declare namespace Aqueduct {
    let socket: WebSocket;
    /**
     * Initialize the Aqueduct client. Required to use the client.
     */
    const Initialize: (params?: {
        host?: string | undefined;
    } | undefined) => void;
    /**
     * Namespace representing REST API for ERC dEX
     */
    namespace Api {
        interface IPriceLevel {
            price: string;
            volume: string;
            volumeRatio: number;
            position?: string;
        }
        interface IOrderBookListing {
            volume: string;
            priceLevels: IPriceLevel[];
        }
        interface IAggregatedOrderData {
            sells: IOrderBookListing;
            buys: IOrderBookListing;
        }
        /**
         * Fee structure
         */
        interface IFees {
            /**
             * Fee recipient - generally the address of the relayer
             */
            feeRecipient: string;
            /**
             * Fee owed by maker
             */
            makerFee: string;
            /**
             * Fee owed by taker
             */
            takerFee: string;
        }
        /**
         * Ethereum network description
         */
        interface INetwork {
            /**
             * Unique identifier of network
             */
            id: number;
            /**
             * Long description of network
             */
            label: string;
            /**
             * Network endpoint
             */
            url: string;
        }
        /**
         * To set maintenance status from redis-cli:
    set maintenance_status &quot;{ \&quot;isMaintenance\&quot;: true, \&quot;reason\&quot;: \&quot;We are currently performing maintenance on our Ethereum nodes. Service will return as soon as possible.\&quot; }&quot;
    
    or to turn off
    
    set maintenance_status &quot;{ \&quot;isMaintenance\&quot;: false }&quot;
    Current status of app
         */
        interface IMaintenanceStatus {
            isMaintenance: boolean;
            reason?: string;
        }
        /**
         * A notification meant for consumption by clients
         */
        interface Notification {
            /**
             * Hex address of account associated with notification
             */
            account: string;
            /**
             * Text label of notification
             */
            label: string;
            /**
             * Date the notification expires
             */
            expirationDate: Date;
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Date of creation
             */
            dateCreated: Date;
            /**
             * Date of updated
             */
            dateUpdated: Date;
        }
        /**
         * An order that has been recorded on the ERC dEX Order Book
         */
        interface Order {
            /**
             * Date on which the order was closed through fill, cancel, etc
             */
            dateClosed: Date;
            /**
             * ID of the Ethereum network the order is associated with
             */
            networkId: number;
            /**
             * 0x Exchange Contract Address
             */
            exchangeContractAddress: string;
            /**
             * Unix timestamp of order expiration (in seconds)
             */
            expirationUnixTimestampSec: number;
            /**
             * Address of the fee recipient
             */
            feeRecipient: string;
            /**
             * Address of the order maker
             */
            maker: string;
            /**
             * Fee due from maker on order fill
             */
            makerFee: string;
            /**
             * Token address of the maker token
             */
            makerTokenAddress: string;
            /**
             * Total amount of maker token in order
             */
            makerTokenAmount: string;
            /**
             * Secure salt
             */
            salt: string;
            /**
             * Serialized version of the EC signature for signed orders
             */
            serializedEcSignature: string;
            /**
             * Taker address; generally a null taker
             */
            taker: string;
            /**
             * Fee due from taker on order fill
             */
            takerFee: string;
            /**
             * Token address of the taker token
             */
            takerTokenAddress: string;
            /**
             * Total amount of taker token in order
             */
            takerTokenAmount: string;
            /**
             * Remaining amount in the order in terms of taker token units
             */
            remainingTakerTokenAmount: string;
            /**
             * The hash of the signed order
             */
            orderHash: string;
            /**
             * State of the order: Open (0), Canceled (1),
      Filled (2), Expired(3), Removed(4),
      PendingCancel (5)
             */
            state: number;
            source: string;
            takerEvents: TakerEvent[];
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Date of creation
             */
            dateCreated: Date;
            /**
             * Date of updated
             */
            dateUpdated: Date;
        }
        interface TakerEvent {
            /**
             * ID of the associated order
             */
            orderId: number;
            /**
             * Amount filled on the order
             */
            takerAmount: string;
            /**
             * Address of the order taker
             */
            taker: string;
            /**
             * Associated transaction hash of fill event
             */
            txHash: string;
            /**
             * State of the event: Pending(0), Complete (1), Failed (2)
             */
            state: number;
            order: Order;
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Date of creation
             */
            dateCreated: Date;
            /**
             * Date of updated
             */
            dateUpdated: Date;
        }
        interface IMarketOrderQuote {
            totalQuantity: string;
            orders: Order[];
        }
        interface IDateSummary {
            date: Date;
            low?: number;
            high?: number;
            open?: number;
            close?: number;
            volume?: number;
        }
        interface ITokenTicker {
            id: string;
            name: string;
            symbol: string;
            usdPrice: string;
            btcPrice: string;
            hourlyPercentageChange: string;
            dailyPercentageChange: string;
            weeklyPercentageChange: string;
            dailyVolume: string;
            priceEth: string;
        }
        interface IStandardToken {
            address: string;
            minAmount: string;
            maxAmount: string;
            precision: number;
        }
        interface IStandardTokenPair {
            tokenA: IStandardToken;
            tokenB: IStandardToken;
        }
        /**
         * Elliptic Curve Digital Signature
         */
        interface IEcSignature {
            v: number;
            r: string;
            s: string;
        }
        interface IStandardOrder {
            exchangeContractAddress: string;
            maker: string;
            taker: string;
            makerTokenAddress: string;
            takerTokenAddress: string;
            feeRecipient: string;
            makerTokenAmount: string;
            takerTokenAmount: string;
            makerFee: string;
            takerFee: string;
            expirationUnixTimestampSec: string;
            salt: string;
            ecSignature: IEcSignature;
            remainingTakerTokenAmount: string;
        }
        interface IStandardFeeRequest {
            maker: string;
            taker: string;
            exchangeContractAddress: string;
            makerTokenAddress: string;
            takerTokenAddress: string;
            makerTokenAmount: string;
            takerTokenAmount: string;
            expirationUnixTimestampSec: string;
            salt: string;
        }
        interface IStandardOrderCreationRequest {
            /**
             * Order maker
             */
            maker: string;
            /**
             * Order taker; should generally be the null address (0x000...) in the case of ERC dEX
             */
            taker: string;
            /**
             * Amount of maker token in trade
             */
            makerTokenAmount: string;
            /**
             * Amount of taker token in trade
             */
            takerTokenAmount: string;
            /**
             * Fee owed by maker
             */
            makerFee: string;
            /**
             * Fee owed by taker
             */
            takerFee: string;
            /**
             * Address of maker token
             */
            makerTokenAddress: string;
            /**
             * Address of taker token
             */
            takerTokenAddress: string;
            /**
             * Secure salt
             */
            salt: string;
            /**
             * Recipient of owed fees
             */
            feeRecipient: string;
            /**
             * Address of 0x exchange contract
             */
            exchangeContractAddress: string;
            /**
             * Unix timestamp when order expires
             */
            expirationUnixTimestampSec: string;
            /**
             * Secure EC Signature
             */
            ecSignature: IEcSignature;
        }
        interface IStandardOrderbook {
            bids: IStandardOrder[];
            asks: IStandardOrder[];
        }
        interface IToken {
            name: string;
            address: string;
            symbol: string;
            decimals: number;
        }
        interface ITokenPair {
            tokenA: IToken;
            tokenB: IToken;
            minimumQuantity: string;
            baseVolume: string;
            quoteVolume: string;
        }
        interface ITokenPairSummary {
            tokenPair: ITokenPair;
            lastPrice?: string;
            netChange?: string;
            bid?: string;
            ask?: string;
        }
        interface IAggregatedOrdersGetParams {
            networkId: number;
            baseTokenAddress?: string;
            quoteTokenAddress?: string;
            maker?: string;
        }
        interface IFeesGetParams {
            makerTokenAddress: string;
            takerTokenAddress: string;
            makerTokenAmount: string;
            takerTokenAmount: string;
            networkId: number;
        }
        interface INotificationsGetParams {
            account: string;
        }
        interface IOrdersGetParams {
            /**
             * ID of Ethereum Network
             */
            networkId: number;
            /**
             * Address of maker token
             */
            makerTokenAddress?: string;
            /**
             * Address of taker token
             */
            takerTokenAddress?: string;
            /**
             * Use ascending sort order
             */
            isAscending?: boolean;
            /**
             * Sort order: price or dateCreated
             */
            sortOrder?: string;
            /**
             * Address of maker
             */
            maker?: string;
            /**
             * Include orders from other relayers
             */
            includeExternal?: boolean;
            isOpen?: boolean;
        }
        interface IOrdersGetBestParams {
            /**
             * Address of maker token
             */
            makerTokenAddress: string;
            /**
             * Address of taker token
             */
            takerTokenAddress: string;
            /**
             * Address of base token
             */
            baseTokenAddress: string;
            /**
             * Quantity of pair requested
             */
            quantity: string;
            /**
             * ID of Ethereum network
             */
            networkId: number;
            /**
             * Address of order taker
             */
            takerAddress: string;
        }
        interface IReportsGetHistoricalParams {
            /**
             * ID of Ethereum network
             */
            networkId: number;
            /**
             * Address of maker token
             */
            makerTokenAddress: string;
            /**
             * Address of taker token
             */
            takerTokenAddress: string;
            /**
             * Start Date
             */
            startDate: Date;
            /**
             * End Date
             */
            endDate: Date;
        }
        interface IStandardGetTokenPairsParams {
            networkId: number;
            per_page?: number;
            page?: number;
        }
        interface IStandardGetOrdersParams {
            networkId: number;
            per_page?: number;
            page?: number;
            exchangeContractAddress?: string;
            tokenAddress?: string;
            makerTokenAddress?: string;
            takerTokenAddress?: string;
            maker?: string;
            taker?: string;
            trader?: string;
            feeRecipient?: string;
            source?: string;
        }
        interface IStandardGetOrderByHashParams {
            networkId: number;
            orderHash: string;
        }
        interface IStandardGetFeesParams {
            networkId: number;
            request: IStandardFeeRequest;
        }
        interface IStandardCreateParams {
            networkId: number;
            request: IStandardOrderCreationRequest;
        }
        interface IStandardGetOrderbookParams {
            networkId: number;
            baseTokenAddress: string;
            quoteTokenAddress: string;
            per_page?: number;
            page?: number;
            source?: string;
        }
        interface ITakerEventsGetByTakerParams {
            /**
             * ID of Ethereum network
             */
            networkId: number;
            /**
             * Address of taker
             */
            taker: string;
        }
        interface ITakerEventsGetByPairParams {
            /**
             * ID of Ethereum network
             */
            networkId: number;
            /**
             * Address of maker token
             */
            makerTokenAddress: string;
            /**
             * Address of taker token
             */
            takerTokenAddress: string;
            taker?: string;
        }
        interface ITokenPairSummariesGetParams {
            /**
             * ID of Ethereum network
             */
            networkId: number;
        }
        interface ITokenPairsGetParams {
            /**
             * ID of Ethereum network
             */
            networkId: number;
        }
        class AggregatedOrdersService extends ApiService {
            get(params: IAggregatedOrdersGetParams): Promise<IAggregatedOrderData>;
        }
        class FeesService extends ApiService {
            /**
             * Get fees for an order of described parameters
             */
            get(params: IFeesGetParams): Promise<IFees>;
        }
        class NetworksService extends ApiService {
            /**
             * Get a list of supported networks
             */
            getSupported(): Promise<INetwork[]>;
            /**
             * Determine if app is in maintenance mode
             */
            isMaintenance(): Promise<IMaintenanceStatus>;
        }
        class NotificationsService extends ApiService {
            /**
             * Get active notifications for an account
             */
            get(params: INotificationsGetParams): Promise<Notification[]>;
        }
        class OrdersService extends ApiService {
            /**
             * Get list of orders
             */
            get(params: IOrdersGetParams): Promise<Order[]>;
            /**
             * Get the order(s) representing the best market price
             */
            getBest(params: IOrdersGetBestParams): Promise<IMarketOrderQuote>;
        }
        class ReportsService extends ApiService {
            /**
             * Get historical data for order book
             */
            getHistorical(params: IReportsGetHistoricalParams): Promise<IDateSummary[]>;
            getTickerData(): Promise<ITokenTicker[]>;
        }
        class StandardService extends ApiService {
            getTokenPairs(params: IStandardGetTokenPairsParams): Promise<IStandardTokenPair[]>;
            getOrders(params: IStandardGetOrdersParams): Promise<IStandardOrder[]>;
            getOrderByHash(params: IStandardGetOrderByHashParams): Promise<IStandardOrder>;
            getFees(params: IStandardGetFeesParams): Promise<IFees>;
            /**
             * Create an order
             */
            create(params: IStandardCreateParams): Promise<Order>;
            getOrderbook(params: IStandardGetOrderbookParams): Promise<IStandardOrderbook>;
        }
        class TakerEventsService extends ApiService {
            /**
             * Get Taker Events
             */
            getByTaker(params: ITakerEventsGetByTakerParams): Promise<TakerEvent[]>;
            /**
             * Get Taker Events by token pair
             */
            getByPair(params: ITakerEventsGetByPairParams): Promise<TakerEvent[]>;
        }
        class TokenPairSummariesService extends ApiService {
            /**
             * Get a list of token pair summaries
             */
            get(params: ITokenPairSummariesGetParams): Promise<ITokenPairSummary[]>;
        }
        class TokenPairsService extends ApiService {
            /**
             * Get a list of supported token pairs
             */
            get(params: ITokenPairsGetParams): Promise<any>;
        }
    }
    /**
     * Namespace containing socket related events
     */
    namespace Events {
        /**
    * This file was automatically generated by json-schema-to-typescript.
    * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
    * and run json-schema-to-typescript to regenerate this file.
    */
        interface IPairOrderChangeEventParams {
            makerTokenAddress: string;
            takerTokenAddress: string;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IOrderChangeEventData {
            order: Order;
            eventType: ("canceled" | "created" | "expired" | "filled" | "partially-filled" | "pending-cancellation" | "pending-filled" | "pending-partially-filled" | "removed");
            reason?: string;
        }
        /**
         * An order that has been recorded on the ERC dEX Order Book
         */
        interface Order {
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateClosed: Date;
            /**
             * ID of the Ethereum network the order is associated with
             */
            networkId: number;
            /**
             * 0x Exchange Contract Address
             */
            exchangeContractAddress: string;
            /**
             * Unix timestamp of order expiration (in seconds)
             */
            expirationUnixTimestampSec: number;
            /**
             * Address of the fee recipient
             */
            feeRecipient: string;
            /**
             * Address of the order maker
             */
            maker: string;
            /**
             * Fee due from maker on order fill
             */
            makerFee: string;
            /**
             * Token address of the maker token
             */
            makerTokenAddress: string;
            /**
             * Total amount of maker token in order
             */
            makerTokenAmount: string;
            /**
             * Secure salt
             */
            salt: string;
            /**
             * Serialized version of the EC signature for signed orders
             */
            serializedEcSignature: string;
            /**
             * Taker address; generally a null taker
             */
            taker: string;
            /**
             * Fee due from taker on order fill
             */
            takerFee: string;
            /**
             * Token address of the taker token
             */
            takerTokenAddress: string;
            /**
             * Total amount of taker token in order
             */
            takerTokenAmount: string;
            /**
             * Remaining amount in the order in terms of taker token units
             */
            remainingTakerTokenAmount: string;
            /**
             * The hash of the signed order
             */
            orderHash: string;
            /**
             * State of the order: Open (0), Canceled (1),
             * Filled (2), Expired(3), Removed(4),
             * PendingCancel (5)
             */
            state: number;
            source: string;
            takerEvents: TakerEvent[];
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        interface TakerEvent {
            /**
             * ID of the associated order
             */
            orderId: number;
            /**
             * Amount filled on the order
             */
            takerAmount: string;
            /**
             * Address of the order taker
             */
            taker: string;
            /**
             * Associated transaction hash of fill event
             */
            txHash: string;
            /**
             * State of the event: Pending(0), Complete (1), Failed (2)
             */
            state: number;
            order: Order;
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IAccountOrderChangeEventParams {
            account: string;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IAccountNotificationEventParams {
            account: string;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IAccountNotificationEventData {
            notification: Notification;
        }
        /**
         * A notification meant for consumption by clients
         */
        interface Notification {
            /**
             * Hex address of account associated with notification
             */
            account: string;
            /**
             * Text label of notification
             */
            label: string;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            expirationDate: Date;
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IPairTakerEventEventParams {
            makerTokenAddress: string;
            takerTokenAddress: string;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IPairTakerEventEventData {
            takerEvent: TakerEvent;
            eventType: ("created" | "removed" | "updated");
        }
        interface TakerEvent {
            /**
             * ID of the associated order
             */
            orderId: number;
            /**
             * Amount filled on the order
             */
            takerAmount: string;
            /**
             * Address of the order taker
             */
            taker: string;
            /**
             * Associated transaction hash of fill event
             */
            txHash: string;
            /**
             * State of the event: Pending(0), Complete (1), Failed (2)
             */
            state: number;
            order: Order;
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        /**
         * An order that has been recorded on the ERC dEX Order Book
         */
        interface Order {
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateClosed: Date;
            /**
             * ID of the Ethereum network the order is associated with
             */
            networkId: number;
            /**
             * 0x Exchange Contract Address
             */
            exchangeContractAddress: string;
            /**
             * Unix timestamp of order expiration (in seconds)
             */
            expirationUnixTimestampSec: number;
            /**
             * Address of the fee recipient
             */
            feeRecipient: string;
            /**
             * Address of the order maker
             */
            maker: string;
            /**
             * Fee due from maker on order fill
             */
            makerFee: string;
            /**
             * Token address of the maker token
             */
            makerTokenAddress: string;
            /**
             * Total amount of maker token in order
             */
            makerTokenAmount: string;
            /**
             * Secure salt
             */
            salt: string;
            /**
             * Serialized version of the EC signature for signed orders
             */
            serializedEcSignature: string;
            /**
             * Taker address; generally a null taker
             */
            taker: string;
            /**
             * Fee due from taker on order fill
             */
            takerFee: string;
            /**
             * Token address of the taker token
             */
            takerTokenAddress: string;
            /**
             * Total amount of taker token in order
             */
            takerTokenAmount: string;
            /**
             * Remaining amount in the order in terms of taker token units
             */
            remainingTakerTokenAmount: string;
            /**
             * The hash of the signed order
             */
            orderHash: string;
            /**
             * State of the order: Open (0), Canceled (1),
             * Filled (2), Expired(3), Removed(4),
             * PendingCancel (5)
             */
            state: number;
            source: string;
            takerEvents: TakerEvent[];
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IAccountTakerEventEventParams {
            account: string;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface IAccountTakerEventEventData {
            takerEvent: TakerEvent;
            eventType: ("created" | "removed" | "updated");
        }
        interface TakerEvent {
            /**
             * ID of the associated order
             */
            orderId: number;
            /**
             * Amount filled on the order
             */
            takerAmount: string;
            /**
             * Address of the order taker
             */
            taker: string;
            /**
             * Associated transaction hash of fill event
             */
            txHash: string;
            /**
             * State of the event: Pending(0), Complete (1), Failed (2)
             */
            state: number;
            order: Order;
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        /**
         * An order that has been recorded on the ERC dEX Order Book
         */
        interface Order {
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateClosed: Date;
            /**
             * ID of the Ethereum network the order is associated with
             */
            networkId: number;
            /**
             * 0x Exchange Contract Address
             */
            exchangeContractAddress: string;
            /**
             * Unix timestamp of order expiration (in seconds)
             */
            expirationUnixTimestampSec: number;
            /**
             * Address of the fee recipient
             */
            feeRecipient: string;
            /**
             * Address of the order maker
             */
            maker: string;
            /**
             * Fee due from maker on order fill
             */
            makerFee: string;
            /**
             * Token address of the maker token
             */
            makerTokenAddress: string;
            /**
             * Total amount of maker token in order
             */
            makerTokenAmount: string;
            /**
             * Secure salt
             */
            salt: string;
            /**
             * Serialized version of the EC signature for signed orders
             */
            serializedEcSignature: string;
            /**
             * Taker address; generally a null taker
             */
            taker: string;
            /**
             * Fee due from taker on order fill
             */
            takerFee: string;
            /**
             * Token address of the taker token
             */
            takerTokenAddress: string;
            /**
             * Total amount of taker token in order
             */
            takerTokenAmount: string;
            /**
             * Remaining amount in the order in terms of taker token units
             */
            remainingTakerTokenAmount: string;
            /**
             * The hash of the signed order
             */
            orderHash: string;
            /**
             * State of the order: Open (0), Canceled (1),
             * Filled (2), Expired(3), Removed(4),
             * PendingCancel (5)
             */
            state: number;
            source: string;
            takerEvents: TakerEvent[];
            /**
             * Unique Identifier
             */
            id: number;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateCreated: Date;
            /**
             * Enables basic storage and retrieval of dates and times.
             */
            dateUpdated: Date;
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface ITickerSubscriptionParams {
        }
        /**
        * This file was automatically generated by json-schema-to-typescript.
        * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
        * and run json-schema-to-typescript to regenerate this file.
        */
        interface ITickerSubscriptionData {
            tickers: ITokenTicker[];
        }
        interface ITokenTicker {
            id: string;
            name: string;
            symbol: string;
            usdPrice: string;
            btcPrice: string;
            hourlyPercentageChange: string;
            dailyPercentageChange: string;
            weeklyPercentageChange: string;
            dailyVolume: string;
            priceEth: string;
        }
        abstract class SocketEvent<P extends {
            [key: string]: any;
        }, R> {
            protected abstract path: string;
            private params;
            private callback;
            /**
             * Subscribe to this event
             * @param params Payload to submit to the server
             * @param cb Handler for event broadcasts
             */
            subscribe(params: P, cb: (data: R) => void): this;
            /**
             * Dispose of an active subscription
             */
            unsubscribe(): void;
            private getChannel(params);
        }
        /**
         * Order changes relating to a token pair
         */
        class PairOrderChange extends SocketEvent<IPairOrderChangeEventParams, IOrderChangeEventData> {
            protected path: string;
        }
        /**
         * Order changes related to an account address
         */
        class AccountOrderChange extends SocketEvent<IAccountOrderChangeEventParams, IOrderChangeEventData> {
            protected path: string;
        }
        /**
         * Notifications related to an account address
         */
        class AccountNotification extends SocketEvent<IAccountNotificationEventParams, IAccountNotificationEventData> {
            protected path: string;
        }
        /**
         * Taker events related to a token pair
         */
        class PairTakerEvent extends SocketEvent<IPairTakerEventEventParams, IPairTakerEventEventData> {
            protected path: string;
        }
        /**
         * Taker events related to an address
         */
        class AccountTakerEvent extends SocketEvent<IAccountTakerEventEventParams, IAccountTakerEventEventData> {
            protected path: string;
        }
        /**
         * Price Ticker Updates
         */
        class TickerSubscription extends SocketEvent<ITickerSubscriptionParams, ITickerSubscriptionData> {
            protected path: string;
        }
    }
    namespace Utils {
        interface ISignOrderParams {
            maker: string;
            taker: string;
            makerFee: BigNumber;
            takerFee: BigNumber;
            makerTokenAmount: BigNumber;
            makerTokenAddress: string;
            takerTokenAmount: BigNumber;
            takerTokenAddress: string;
            exchangeContractAddress: string;
            feeRecipient: string;
            expirationUnixTimestampSec: number;
            salt: BigNumber;
        }
        interface IZeroExOrder {
            maker: string;
            taker: string;
            makerFee: BigNumber;
            takerFee: BigNumber;
            makerTokenAmount: BigNumber;
            takerTokenAmount: BigNumber;
            makerTokenAddress: string;
            takerTokenAddress: string;
            salt: BigNumber;
            exchangeContractAddress: string;
            feeRecipient: string;
            expirationUnixTimestampSec: BigNumber;
        }
        interface IZeroExSignedOrder extends IZeroExOrder {
            ecSignature: Api.IEcSignature;
        }
        interface IZeroExImplementation {
            client: {
                signOrderHashAsync(orderHash: string, maker: string): Promise<Api.IEcSignature>;
            };
            getOrderHashHex: (order: IZeroExOrder) => string;
        }
        const signOrder: (zeroEx: IZeroExImplementation, params: ISignOrderParams) => Promise<Api.IStandardOrderCreationRequest>;
        const convertStandardOrderToSignedOrder: (order: Api.IStandardOrder) => IZeroExSignedOrder;
        const convertOrderToSignedOrder: (order: Api.Order) => IZeroExSignedOrder;
        const Tokens: TokenCache;
    }
}
