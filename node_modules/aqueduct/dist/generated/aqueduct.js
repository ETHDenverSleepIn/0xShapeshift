"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
var api_service_1 = require("../api-service");
var bignumber_js_1 = require("bignumber.js");
var token_cache_1 = require("../token-cache");
var ReconnectingWebsocket = require('reconnecting-websocket');
var Aqueduct;
(function (Aqueduct) {
    var baseApiUrl;
    var hasWebSocket;
    var socketOpen = false;
    var subscriptions = {};
    var send = function (message, tries) {
        if (tries === void 0) { tries = 0; }
        if (socketOpen) {
            Aqueduct.socket.send(message);
            return;
        }
        // retry for 20 seconds
        if (tries < 20) {
            setTimeout(function () {
                send(message, tries + 1);
            }, 250);
        }
        else {
            console.log('failed to send');
        }
    };
    /**
     * Initialize the Aqueduct client. Required to use the client.
     */
    Aqueduct.Initialize = function (params) {
        var hasProcess = typeof process !== 'undefined' && process.env;
        var host = (params && params.host) || (hasProcess && process.env.AQUEDUCT_HOST) || 'api.ercdex.com';
        baseApiUrl = "https://" + host;
        if (hasProcess && baseApiUrl.indexOf('localhost') !== -1) {
            process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;
        }
        hasWebSocket = typeof WebSocket !== 'undefined';
        if (!hasWebSocket) {
            console.warn('No WebSocket found in global namespace; subscriptions will not be configured.');
            return;
        }
        Aqueduct.socket = new ReconnectingWebsocket("wss:" + host, undefined);
        Aqueduct.socket.onopen = function () {
            Object.keys(subscriptions).map(function (k) { return subscriptions[k]; }).forEach(function (s) {
                if (s && !s.subActive) {
                    s.resub();
                    s.subActive = true;
                }
            });
            socketOpen = true;
        };
        Aqueduct.socket.onclose = function () {
            Object.keys(subscriptions).map(function (k) { return subscriptions[k]; }).forEach(function (s) {
                if (s) {
                    s.subActive = false;
                }
            });
            socketOpen = false;
        };
        Aqueduct.socket.onmessage = function (event) {
            try {
                var data_1 = JSON.parse(event.data);
                if (data_1.channel) {
                    var sub = subscriptions[data_1.channel];
                    if (sub) {
                        sub.callbacks.forEach(function (cb) { return cb(data_1.data); });
                    }
                }
            }
            catch (err) {
                return;
            }
        };
    };
    /**
     * Namespace representing REST API for ERC dEX
     */
    var Api;
    (function (Api) {
        var AggregatedOrdersService = /** @class */ (function (_super) {
            __extends(AggregatedOrdersService, _super);
            function AggregatedOrdersService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AggregatedOrdersService.prototype.get = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/aggregated_orders"
                        };
                        requestParams.queryParameters = {
                            networkId: params.networkId,
                            baseTokenAddress: params.baseTokenAddress,
                            quoteTokenAddress: params.quoteTokenAddress,
                            maker: params.maker,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return AggregatedOrdersService;
        }(api_service_1.ApiService));
        Api.AggregatedOrdersService = AggregatedOrdersService;
        var FeesService = /** @class */ (function (_super) {
            __extends(FeesService, _super);
            function FeesService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get fees for an order of described parameters
             */
            FeesService.prototype.get = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'POST',
                            url: baseApiUrl + "/api/fees"
                        };
                        requestParams.queryParameters = {
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            makerTokenAmount: params.makerTokenAmount,
                            takerTokenAmount: params.takerTokenAmount,
                            networkId: params.networkId,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return FeesService;
        }(api_service_1.ApiService));
        Api.FeesService = FeesService;
        var NetworksService = /** @class */ (function (_super) {
            __extends(NetworksService, _super);
            function NetworksService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get a list of supported networks
             */
            NetworksService.prototype.getSupported = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/networks"
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            /**
             * Determine if app is in maintenance mode
             */
            NetworksService.prototype.isMaintenance = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/networks/maintenance"
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return NetworksService;
        }(api_service_1.ApiService));
        Api.NetworksService = NetworksService;
        var NotificationsService = /** @class */ (function (_super) {
            __extends(NotificationsService, _super);
            function NotificationsService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get active notifications for an account
             */
            NotificationsService.prototype.get = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/notifications"
                        };
                        requestParams.queryParameters = {
                            account: params.account,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return NotificationsService;
        }(api_service_1.ApiService));
        Api.NotificationsService = NotificationsService;
        var OrdersService = /** @class */ (function (_super) {
            __extends(OrdersService, _super);
            function OrdersService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get list of orders
             */
            OrdersService.prototype.get = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/orders"
                        };
                        requestParams.queryParameters = {
                            networkId: params.networkId,
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            isAscending: params.isAscending,
                            sortOrder: params.sortOrder,
                            maker: params.maker,
                            includeExternal: params.includeExternal,
                            isOpen: params.isOpen,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            /**
             * Get the order(s) representing the best market price
             */
            OrdersService.prototype.getBest = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/orders/best"
                        };
                        requestParams.queryParameters = {
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            baseTokenAddress: params.baseTokenAddress,
                            quantity: params.quantity,
                            networkId: params.networkId,
                            takerAddress: params.takerAddress,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return OrdersService;
        }(api_service_1.ApiService));
        Api.OrdersService = OrdersService;
        var ReportsService = /** @class */ (function (_super) {
            __extends(ReportsService, _super);
            function ReportsService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get historical data for order book
             */
            ReportsService.prototype.getHistorical = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/reports/historical"
                        };
                        requestParams.queryParameters = {
                            networkId: params.networkId,
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            startDate: params.startDate,
                            endDate: params.endDate,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            ReportsService.prototype.getTickerData = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/reports/ticker"
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return ReportsService;
        }(api_service_1.ApiService));
        Api.ReportsService = ReportsService;
        var StandardService = /** @class */ (function (_super) {
            __extends(StandardService, _super);
            function StandardService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            StandardService.prototype.getTokenPairs = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/standard/" + params.networkId + "/v0/token_pairs"
                        };
                        requestParams.queryParameters = {
                            per_page: params.per_page,
                            page: params.page,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            StandardService.prototype.getOrders = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/standard/" + params.networkId + "/v0/orders"
                        };
                        requestParams.queryParameters = {
                            per_page: params.per_page,
                            page: params.page,
                            exchangeContractAddress: params.exchangeContractAddress,
                            tokenAddress: params.tokenAddress,
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            maker: params.maker,
                            taker: params.taker,
                            trader: params.trader,
                            feeRecipient: params.feeRecipient,
                            source: params.source,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            StandardService.prototype.getOrderByHash = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/standard/" + params.networkId + "/v0/order/" + params.orderHash
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            StandardService.prototype.getFees = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'POST',
                            url: baseApiUrl + "/api/standard/" + params.networkId + "/v0/fees"
                        };
                        requestParams.body = params.request;
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            /**
             * Create an order
             */
            StandardService.prototype.create = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'POST',
                            url: baseApiUrl + "/api/standard/" + params.networkId + "/v0/order"
                        };
                        requestParams.body = params.request;
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            StandardService.prototype.getOrderbook = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/standard/" + params.networkId + "/v0/orderbook"
                        };
                        requestParams.queryParameters = {
                            baseTokenAddress: params.baseTokenAddress,
                            quoteTokenAddress: params.quoteTokenAddress,
                            per_page: params.per_page,
                            page: params.page,
                            source: params.source,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return StandardService;
        }(api_service_1.ApiService));
        Api.StandardService = StandardService;
        var TakerEventsService = /** @class */ (function (_super) {
            __extends(TakerEventsService, _super);
            function TakerEventsService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get Taker Events
             */
            TakerEventsService.prototype.getByTaker = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/taker-events/taker"
                        };
                        requestParams.queryParameters = {
                            networkId: params.networkId,
                            taker: params.taker,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            /**
             * Get Taker Events by token pair
             */
            TakerEventsService.prototype.getByPair = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/taker-events/pair"
                        };
                        requestParams.queryParameters = {
                            networkId: params.networkId,
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            taker: params.taker,
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return TakerEventsService;
        }(api_service_1.ApiService));
        Api.TakerEventsService = TakerEventsService;
        var TokenPairSummariesService = /** @class */ (function (_super) {
            __extends(TokenPairSummariesService, _super);
            function TokenPairSummariesService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get a list of token pair summaries
             */
            TokenPairSummariesService.prototype.get = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/token-pair-summaries/" + params.networkId
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return TokenPairSummariesService;
        }(api_service_1.ApiService));
        Api.TokenPairSummariesService = TokenPairSummariesService;
        var TokenPairsService = /** @class */ (function (_super) {
            __extends(TokenPairsService, _super);
            function TokenPairsService() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Get a list of supported token pairs
             */
            TokenPairsService.prototype.get = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestParams;
                    return __generator(this, function (_a) {
                        requestParams = {
                            method: 'GET',
                            url: baseApiUrl + "/api/token-pairs/" + params.networkId
                        };
                        return [2 /*return*/, this.executeRequest(requestParams)];
                    });
                });
            };
            return TokenPairsService;
        }(api_service_1.ApiService));
        Api.TokenPairsService = TokenPairsService;
    })(Api = Aqueduct.Api || (Aqueduct.Api = {}));
    /**
     * Namespace containing socket related events
     */
    var Events;
    (function (Events) {
        /* tslint:disable */ /**
    * This file was automatically generated by json-schema-to-typescript.
    * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
    * and run json-schema-to-typescript to regenerate this file.
    */
        var SocketEvent = /** @class */ (function () {
            function SocketEvent() {
            }
            /**
             * Subscribe to this event
             * @param params Payload to submit to the server
             * @param cb Handler for event broadcasts
             */
            SocketEvent.prototype.subscribe = function (params, cb) {
                if (!hasWebSocket) {
                    throw new Error('WebSockets not configured.');
                }
                this.params = params;
                this.callback = cb;
                var channel = this.getChannel(params);
                send("sub:" + channel);
                var sub = subscriptions[channel];
                if (sub) {
                    sub.callbacks.push(this.callback);
                }
                else {
                    subscriptions[channel] = {
                        callbacks: [this.callback],
                        resub: function () {
                            send("sub:" + channel);
                        },
                        subActive: true
                    };
                }
                return this;
            };
            /**
             * Dispose of an active subscription
             */
            SocketEvent.prototype.unsubscribe = function () {
                send("unsub:" + this.getChannel(this.params));
            };
            SocketEvent.prototype.getChannel = function (params) {
                var channel = this.path;
                Object.keys(params).forEach(function (k) {
                    channel = channel.replace(":" + k, params[k]);
                });
                return channel;
            };
            return SocketEvent;
        }());
        Events.SocketEvent = SocketEvent;
        /**
         * Order changes relating to a token pair
         */
        var PairOrderChange = /** @class */ (function (_super) {
            __extends(PairOrderChange, _super);
            function PairOrderChange() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.path = 'pair-order-change/:makerTokenAddress/:takerTokenAddress';
                return _this;
            }
            return PairOrderChange;
        }(SocketEvent));
        Events.PairOrderChange = PairOrderChange;
        /**
         * Order changes related to an account address
         */
        var AccountOrderChange = /** @class */ (function (_super) {
            __extends(AccountOrderChange, _super);
            function AccountOrderChange() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.path = 'account-order-change/:account';
                return _this;
            }
            return AccountOrderChange;
        }(SocketEvent));
        Events.AccountOrderChange = AccountOrderChange;
        /**
         * Notifications related to an account address
         */
        var AccountNotification = /** @class */ (function (_super) {
            __extends(AccountNotification, _super);
            function AccountNotification() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.path = 'account-notification/:account';
                return _this;
            }
            return AccountNotification;
        }(SocketEvent));
        Events.AccountNotification = AccountNotification;
        /**
         * Taker events related to a token pair
         */
        var PairTakerEvent = /** @class */ (function (_super) {
            __extends(PairTakerEvent, _super);
            function PairTakerEvent() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.path = 'pair-taker-event/:makerTokenAddress/:takerTokenAddress';
                return _this;
            }
            return PairTakerEvent;
        }(SocketEvent));
        Events.PairTakerEvent = PairTakerEvent;
        /**
         * Taker events related to an address
         */
        var AccountTakerEvent = /** @class */ (function (_super) {
            __extends(AccountTakerEvent, _super);
            function AccountTakerEvent() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.path = 'account-taker-event/:account';
                return _this;
            }
            return AccountTakerEvent;
        }(SocketEvent));
        Events.AccountTakerEvent = AccountTakerEvent;
        /**
         * Price Ticker Updates
         */
        var TickerSubscription = /** @class */ (function (_super) {
            __extends(TickerSubscription, _super);
            function TickerSubscription() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.path = 'ticker';
                return _this;
            }
            return TickerSubscription;
        }(SocketEvent));
        Events.TickerSubscription = TickerSubscription;
    })(Events = Aqueduct.Events || (Aqueduct.Events = {}));
    var Utils;
    (function (Utils) {
        var _this = this;
        Utils.signOrder = function (zeroEx, params) { return __awaiter(_this, void 0, void 0, function () {
            var order, orderHash, ecSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        order = {
                            maker: params.maker,
                            taker: params.taker,
                            makerFee: params.makerFee,
                            takerFee: params.takerFee,
                            makerTokenAmount: params.makerTokenAmount,
                            takerTokenAmount: params.takerTokenAmount,
                            makerTokenAddress: params.makerTokenAddress,
                            takerTokenAddress: params.takerTokenAddress,
                            salt: params.salt,
                            exchangeContractAddress: params.exchangeContractAddress,
                            feeRecipient: params.feeRecipient,
                            expirationUnixTimestampSec: new bignumber_js_1.BigNumber(params.expirationUnixTimestampSec)
                        };
                        orderHash = zeroEx.getOrderHashHex(order);
                        return [4 /*yield*/, zeroEx.client.signOrderHashAsync(orderHash, params.maker)];
                    case 1:
                        ecSignature = _a.sent();
                        return [2 /*return*/, {
                                maker: params.maker,
                                taker: order.taker,
                                makerFee: params.makerFee.toString(),
                                takerFee: params.takerFee.toString(),
                                makerTokenAmount: params.makerTokenAmount.toString(),
                                takerTokenAmount: params.takerTokenAmount.toString(),
                                makerTokenAddress: params.makerTokenAddress,
                                takerTokenAddress: params.takerTokenAddress,
                                salt: order.salt.toString(),
                                exchangeContractAddress: params.exchangeContractAddress,
                                feeRecipient: params.feeRecipient,
                                expirationUnixTimestampSec: order.expirationUnixTimestampSec.toString(),
                                ecSignature: ecSignature
                            }];
                }
            });
        }); };
        Utils.convertStandardOrderToSignedOrder = function (order) {
            return {
                ecSignature: order.ecSignature,
                exchangeContractAddress: order.exchangeContractAddress,
                expirationUnixTimestampSec: new bignumber_js_1.BigNumber(order.expirationUnixTimestampSec),
                feeRecipient: order.feeRecipient,
                maker: order.maker,
                makerFee: new bignumber_js_1.BigNumber(order.makerFee),
                makerTokenAddress: order.makerTokenAddress,
                makerTokenAmount: new bignumber_js_1.BigNumber(order.makerTokenAmount),
                salt: new bignumber_js_1.BigNumber(order.salt),
                taker: order.taker,
                takerFee: new bignumber_js_1.BigNumber(order.takerFee),
                takerTokenAddress: order.takerTokenAddress,
                takerTokenAmount: new bignumber_js_1.BigNumber(order.takerTokenAmount)
            };
        };
        Utils.convertOrderToSignedOrder = function (order) {
            return {
                ecSignature: JSON.parse(order.serializedEcSignature),
                exchangeContractAddress: order.exchangeContractAddress,
                expirationUnixTimestampSec: new bignumber_js_1.BigNumber(order.expirationUnixTimestampSec),
                feeRecipient: order.feeRecipient,
                maker: order.maker,
                makerFee: new bignumber_js_1.BigNumber(order.makerFee),
                makerTokenAddress: order.makerTokenAddress,
                makerTokenAmount: new bignumber_js_1.BigNumber(order.makerTokenAmount),
                salt: new bignumber_js_1.BigNumber(order.salt),
                taker: order.taker,
                takerFee: new bignumber_js_1.BigNumber(order.takerFee),
                takerTokenAddress: order.takerTokenAddress,
                takerTokenAmount: new bignumber_js_1.BigNumber(order.takerTokenAmount)
            };
        };
        Utils.Tokens = token_cache_1.tokenCache;
    })(Utils = Aqueduct.Utils || (Aqueduct.Utils = {}));
})(Aqueduct = exports.Aqueduct || (exports.Aqueduct = {}));
//# sourceMappingURL=aqueduct.js.map